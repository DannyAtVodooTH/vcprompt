===========
vcprompt.py
===========

A pure-Python implementation of vcprompt_

.. _vcprompt: http://vc.gerg.ca/hg/vcprompt/



Installing
----------

Place ``vcprompt.py`` somewhere in your ``$PATH``, then add it to your prompt.

For bash::

    PS1='\u@\h:\w $(vcprompt.py)\$'


For zsh you need to enable PROMPT_SUBST first::

    setopt prompt_subst
    PS1='[%n@%m] [%~] $(vcprompt.py)'



Prompt formatting
-----------------

``vcprompt`` takes a single, optional argument - a formatting string.

The arguments are:

* ``%s`` - the VCS system in use
* ``%r`` - the current revision or hash if no revision number is present (e.g. Git)
* ``%h`` - the current hash or revision number if no hash is present (i.e. Subversion, CVS, Bazaar)
* ``%b`` - the current branch (if applicable)
* ``%i`` - the status of the repository (see below)

If not given, the formatting string defaults to ``%s:%b``, that is the current system and the branch. For example::

    git:master


The status indicators for the ``%i`` argument are as follows:

* ``C`` - the repository is clean (unmodified)
* ``M`` - the repository has been modified
* ``S`` - the repository has files which have been
  staged, but not commited (Git only)
* ``U`` - the repository has untracked files



Requirements
------------

* Python 2.5+



Testing
-------

To run the tests, you have to initialize the submodule::

    # clone repo
    $ git clone git://github.com/xvzf/vcprompt.git
    $ cd vcprompt

    # init submodules
    $ git submodule update --init
    $ nosetests || python tests.py



TODO
----

- Only test VCSes which are available on the system
- More complete support and tests for CVS, Darcs
- Add option to show state of repository
- Build a real distutils installer
  - Use argparse/optparse
